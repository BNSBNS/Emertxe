CONNECT(2)                 Linux Programmer's Manual                CONNECT(2)



NNAAMMEE
       connect - initiate a connection on a socket

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>          /* See NOTES */
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>

       iinntt ccoonnnneecctt((iinntt _s_o_c_k_f_d,, ccoonnsstt ssttrruucctt ssoocckkaaddddrr **_a_d_d_r,,
                   ssoocckklleenn__tt _a_d_d_r_l_e_n));;

DDEESSCCRRIIPPTTIIOONN
       The  ccoonnnneecctt()  system call connects the socket referred to by the file
       descriptor _s_o_c_k_f_d to the address specified by _a_d_d_r.  The _a_d_d_r_l_e_n  argu‐
       ment  specifies the size of _a_d_d_r.  The format of the address in _a_d_d_r is
       determined by the address space of the socket _s_o_c_k_f_d; see ssoocckkeett(2) for
       further details.

       If  the socket _s_o_c_k_f_d is of type SSOOCCKK__DDGGRRAAMM then _a_d_d_r is the address to
       which datagrams are sent by default, and the only  address  from  which
       datagrams  are  received.   If  the  socket  is  of type SSOOCCKK__SSTTRREEAAMM or
       SSOOCCKK__SSEEQQPPAACCKKEETT, this call attempts to make a connection to  the  socket
       that is bound to the address specified by _a_d_d_r.

       Generally, connection-based protocol sockets may successfully ccoonnnneecctt()
       only once; connectionless protocol sockets may use  ccoonnnneecctt()  multiple
       times to change their association.  Connectionless sockets may dissolve
       the association by connecting to an address with the  _s_a___f_a_m_i_l_y  member
       of _s_o_c_k_a_d_d_r set to AAFF__UUNNSSPPEECC (supported on Linux since kernel 2.2).

RREETTUURRNN VVAALLUUEE
       If  the connection or binding succeeds, zero is returned.  On error, -1
       is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       The following are general socket  errors  only.   There  may  be  other
       domain-specific error codes.

       EEAACCCCEESS For UNIX domain sockets, which are identified by pathname: Write
              permission is denied on the socket file, or search permission is
              denied for one of the directories in the path prefix.  (See also
              ppaatthh__rreessoolluuttiioonn(7).)

       EEAACCCCEESS, EEPPEERRMM
              The user tried to connect to a broadcast address without  having
              the  socket  broadcast  flag  enabled  or the connection request
              failed because of a local firewall rule.

       EEAADDDDRRIINNUUSSEE
              Local address is already in use.

       EEAAFFNNOOSSUUPPPPOORRTT
              The passed address didn't have the correct address family in its
              _s_a___f_a_m_i_l_y field.

       EEAAGGAAIINN No  more free local ports or insufficient entries in the routing
              cache.     For    AAFF__IINNEETT     see     the     description     of
              _/_p_r_o_c_/_s_y_s_/_n_e_t_/_i_p_v_4_/_i_p___l_o_c_a_l___p_o_r_t___r_a_n_g_e  iipp(7) for information on
              how to increase the number of local ports.

       EEAALLRREEAADDYY
              The socket is nonblocking and a previous connection attempt  has
              not yet been completed.

       EEBBAADDFF  The  file  descriptor is not a valid index in the descriptor ta‐
              ble.

       EECCOONNNNRREEFFUUSSEEDD
              No-one listening on the remote address.

       EEFFAAUULLTT The socket structure  address  is  outside  the  user's  address
              space.

       EEIINNPPRROOGGRREESSSS
              The socket is nonblocking and the connection cannot be completed
              immediately.  It is possible to sseelleecctt(2) or ppoollll(2) for comple‐
              tion by selecting the socket for writing.  After sseelleecctt(2) indi‐
              cates writability, use ggeettssoocckkoopptt(2) to read the SSOO__EERRRROORR option
              at  level  SSOOLL__SSOOCCKKEETT  to  determine whether ccoonnnneecctt() completed
              successfully (SSOO__EERRRROORR is zero) or unsuccessfully  (SSOO__EERRRROORR  is
              one  of the usual error codes listed here, explaining the reason
              for the failure).

       EEIINNTTRR  The system call was interrupted by a signal that was caught; see
              ssiiggnnaall(7).

       EEIISSCCOONNNN
              The socket is already connected.

       EENNEETTUUNNRREEAACCHH
              Network is unreachable.

       EENNOOTTSSOOCCKK
              The file descriptor is not associated with a socket.

       EETTIIMMEEDDOOUUTT
              Timeout while attempting connection.  The server may be too busy
              to accept new connections.  Note that for IP sockets the timeout
              may be very long when syncookies are enabled on the server.

CCOONNFFOORRMMIINNGG TTOO
       SVr4,  4.4BSD,  (the  ccoonnnneecctt()  function  first  appeared  in 4.2BSD),
       POSIX.1-2001.

NNOOTTEESS
       POSIX.1-2001 does not require the inclusion of _<_s_y_s_/_t_y_p_e_s_._h_>, and  this
       header  file  is not required on Linux.  However, some historical (BSD)
       implementations required this header file,  and  portable  applications
       are probably wise to include it.

       The  third argument of ccoonnnneecctt() is in reality an _i_n_t (and this is what
       4.x BSD and libc4 and libc5 have).  Some POSIX  confusion  resulted  in
       the present _s_o_c_k_l_e_n___t, also used by glibc.  See also aacccceepptt(2).

EEXXAAMMPPLLEE
       An example of the use of ccoonnnneecctt() is shown in ggeettaaddddrriinnffoo(3).

SSEEEE AALLSSOO
       aacccceepptt(2),  bbiinndd(2), ggeettssoocckknnaammee(2), lliisstteenn(2), ssoocckkeett(2), ppaatthh__rreessoolluu‐‐
       ttiioonn(7)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, and information about reporting bugs, can
       be found at http://www.kernel.org/doc/man-pages/.



Linux                             2008-12-03                        CONNECT(2)
