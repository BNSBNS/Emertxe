{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red63\green105\blue30;}
\paperw11900\paperh16840\margl1440\margr1440\vieww34640\viewh17400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 1. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 \CocoaLigature0 nandithasmurthy$ mongo --shell localhost/performance performance.js \
MongoDB shell version: 3.2.8\
connecting to: localhost/performance\
> db\
performance\
> homework.init()\
\{\
	"connectionId" : 1,\
	"n" : 1,\
	"syncMillis" : 0,\
	"writtenTo" : null,\
	"err" : null,\
	"ok" : 1\
\}\
still working...\
\{\
	"connectionId" : 1,\
	"updatedExisting" : true,\
	"n" : 20000,\
	"syncMillis" : 0,\
	"writtenTo" : null,\
	"err" : null,\
	"ok" : 1\
\}\
count: 20000\
> \
> show collections\
sensor_readings\
> db.sensor_readings.find().limit(1).pretty()\
\{\
	"_id" : 0,\
	"tstamp" : ISODate("2011-12-31T18:30:00Z"),\
	"active" : true,\
	"x" : 99,\
	"str" : "this is a test"\
\}\
> db.sensor_readings.getIndexes()\
[\
	\{\
		"v" : 1,\
		"key" : \{\
			"_id" : 1\
		\},\
		"name" : "_id_",\
		"ns" : "performance.sensor_readings"\
	\}\
]\
> db.sensor_readings.createIndex(\{"active":1, "tstamp": 1\})\
\{\
	"createdCollectionAutomatically" : false,\
	"numIndexesBefore" : 1,\
	"numIndexesAfter" : 2,\
	"ok" : 1\
\}\
> db.sensor_readings.getIndexes()\
[\
	\{\
		"v" : 1,\
		"key" : \{\
			"_id" : 1\
		\},\
		"name" : "_id_",\
		"ns" : "performance.sensor_readings"\
	\},\
	\{\
		"v" : 1,\
		"key" : \{\
			"active" : 1,\
			"tstamp" : 1\
		\},\
		"name" : "active_1_tstamp_1",\
		"ns" : "performance.sensor_readings"\
	\}\
]\
> homework.a()\
6\
\
2.\
> homework.b()\
simulating a workload in this shell. after completing this homework, you can \
stop this shell with ctrl-c. let it run in the meantime...\
(you will want to open another mongo shell to do your work in.)\
\
note: this function changes the indexes on db.sensor_readings. so if you go \
      back to the previous homework, drop and recreate indexes (or run homework.init() again)\
\
\
info: 1 operations were in progress when homework.b() begins.\
      if you have a replica set more than zero is normal as the replicas will\
      query the primary.\
\
looping...\
connecting to: localhost/performance\
connecting to: localhost/performance\
\
\cf2 In another mongo shell while the first shell is running homework.b()\cf0 \
nandithasmurthy$ ls\
performance.js\
nandithasmurthy$ mongo --shell localhost/performance performance.js \
MongoDB shell version: 3.2.8\
connecting to: localhost/performance\
type "help" for help\
Server has startup warnings: \
2016-10-30T13:51:18.299+0530 I CONTROL  [initandlisten] \
2016-10-30T13:51:18.299+0530 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000\
> \
> db.currentOp()\
\{\
	"inprog" : [\
		\{\
			"desc" : "conn7",\
			"threadId" : "0x700000d4c000",\
			"connectionId" : 7,\
			"client" : "127.0.0.1:50072",\
			"active" : true,\
			"opid" : 300526,\
			"secs_running" : 0,\
			"microsecs_running" : NumberLong(17),\
			"op" : "command",\
			"ns" : "admin.$cmd",\
			"query" : \{\
				"currentOp" : 1\
			\},\
			"numYields" : 0,\
			"locks" : \{\
				\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				\
			\}\
		\},\
		\{\
			"desc" : "conn1",\
			"threadId" : "0x70000082e000",\
			"connectionId" : 1,\
			"client" : "127.0.0.1:49997",\
			"active" : true,\
			"opid" : 299933,\
			"secs_running" : 1,\
			"microsecs_running" : NumberLong(1722223),\
			"op" : "update",\
			"ns" : "performance.sensor_readings",\
			"query" : \{\
				\
			\},\
			"numYields" : 122,\
			"locks" : \{\
				"Global" : "w",\
				"Database" : "w",\
				"Collection" : "w"\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				"Global" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(123),\
						"w" : NumberLong(123)\
					\}\
				\},\
				"Database" : \{\
					"acquireCount" : \{\
						"w" : NumberLong(123)\
					\}\
				\},\
				"Collection" : \{\
					"acquireCount" : \{\
						"w" : NumberLong(123)\
					\}\
				\}\
			\}\
		\},\
		\{\
			"desc" : "conn4",\
			"threadId" : "0x7000009b7000",\
			"connectionId" : 4,\
			"client" : "127.0.0.1:50065",\
			"active" : true,\
			"opid" : 21360,\
			"secs_running" : 671,\
			"microsecs_running" : NumberLong(671383561),\
			"op" : "update",\
			"ns" : "performance.sensor_readings",\
			"query" : \{\
				"$where" : "function()\{sleep(500);return false;\}"\
			\},\
			"numYields" : 1337,\
			"locks" : \{\
				"Global" : "w",\
				"Database" : "w",\
				"Collection" : "w"\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				"Global" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(1342),\
						"w" : NumberLong(1338)\
					\}\
				\},\
				"Database" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(2),\
						"w" : NumberLong(1338)\
					\}\
				\},\
				"Collection" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(2),\
						"w" : NumberLong(1338)\
					\}\
				\}\
			\}\
		\}\
	],\
	"ok" : 1\
\}\
> \
> db.currentOp().inprog.forEach( function(op)\{ if(op.secs_running > 0)\{ print("secs: "+ op.secs_running + "opid: "+ op.opid); \} \} )\
secs: 1496opid: 21360\
> db.currentOp(\
... \{\
... "active": true,\
... "secs_running": \{"$gt": 0\},\
... "ns" : "performance.sensor_readings"\
... \}\
... )\
\{\
	"inprog" : [\
		\{\
			"desc" : "conn4",\
			"threadId" : "0x7000009b7000",\
			"connectionId" : 4,\
			"client" : "127.0.0.1:50065",\
			"active" : true,\
			"opid" : 21360,\
			"secs_running" : 1602,\
			"microsecs_running" : NumberLong(1602612574),\
			"op" : "update",\
			"ns" : "performance.sensor_readings",\
			"query" : \{\
				"$where" : "function()\{sleep(500);return false;\}"\
			\},\
			"numYields" : 3191,\
			"locks" : \{\
				"Global" : "w",\
				"Database" : "w",\
				"Collection" : "w"\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				"Global" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(3196),\
						"w" : NumberLong(3192)\
					\}\
				\},\
				"Database" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(2),\
						"w" : NumberLong(3192)\
					\}\
				\},\
				"Collection" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(2),\
						"w" : NumberLong(3192)\
					\}\
				\}\
			\}\
		\}\
	],\
	"ok" : 1\
\}\
> \
> db.killOp(21360)\
\{ "info" : "attempting to kill op", "ok" : 1 \}\
> db.currentOp( \{ "active": true, "secs_running": \{"$gt": 0\}, "ns" : "performance.sensor_readings" \} )\
\{ "inprog" : [ ], "ok" : 1 \}\
> db.currentOp()\
\{\
	"inprog" : [\
		\{\
			"desc" : "conn7",\
			"threadId" : "0x700000d4c000",\
			"connectionId" : 7,\
			"client" : "127.0.0.1:50072",\
			"active" : true,\
			"opid" : 729455,\
			"secs_running" : 0,\
			"microsecs_running" : NumberLong(14),\
			"op" : "command",\
			"ns" : "admin.$cmd",\
			"query" : \{\
				"currentOp" : 1\
			\},\
			"numYields" : 0,\
			"locks" : \{\
				\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				\
			\}\
		\}\
	],\
	"ok" : 1\
\}\
> \
\cf2 On 1st mongo shell, that was running homework.b()\
Long op ended\
2016-10-30T14:36:37.898+0530 F -        [thread2] Invalid access at address: 0x0\
2016-10-30T14:36:38.112+0530 F -        [thread2] Got signal: 11 (Segmentation fault: 11).\
\
 0x10ae003ba 0x10adffeef 0x7fff94eeb52a 0x10b80ac90 0x10ad1c28c 0x10ad1c8d1 0x7fff91a2e99d 0x7fff91a2e91a 0x7fff91a2c351\
----- BEGIN BACKTRACE -----\
\{"backtrace\'94:\'85\
-----  END BACKTRACE  -----\
Segmentation fault: 11\
nandithasmurthy$ \
So basically, homework.b() should be running else when we \cf0 homework.c() in \cf2 2st mongo shell we will get \
\cf0 > homework.c()\
not seeing the expected activity, is homework.b() really running in a separate shell? try again.\
\
\
\cf3 So Correct way to do :\cf0 \
\cf2 In 1st shell:\cf0 \
 mongo --shell localhost/performance performance.js \
MongoDB shell version: 3.2.8\
connecting to: localhost/performance\
> homework.b()\
simulating a workload in this shell. after completing this homework, you can \
stop this shell with ctrl-c. let it run in the meantime...\
(you will want to open another mongo shell to do your work in.)\
\
note: this function changes the indexes on db.sensor_readings. so if you go \
      back to the previous homework, drop and recreate indexes (or run homework.init() again)\
\
\
info: 1 operations were in progress when homework.b() begins.\
      if you have a replica set more than zero is normal as the replicas will\
      query the primary.\
\
looping...\
connecting to: localhost/performance\
connecting to: localhost/performance\
\
\cf2 In 2nd shell:\cf0 \
\cf2 checking for opid which is slower i.e secs_running >0\cf0 \
\
>db.currentOp().inprog.forEach( function(op)\{ if(op.secs_running > 0)\{ print("secs: "+ op.secs_running + "opid: "+ op.opid); \} \} )\
secs: 77opid: 730191\
> db.killOp(730191)\
\
\
> db.currentOp( \{ "active": true, "secs_running": \{"$gt": 0\}, "ns" : "performance.sensor_readings" \} )\
\{\
	"inprog" : [\
		\{\
			"desc" : "conn11",\
			"threadId" : "0x7000009b7000",\
			"connectionId" : 11,\
			"client" : "127.0.0.1:50268",\
			"active" : true,\
			"opid" : 730191,\
			"secs_running" : 27,\
			"microsecs_running" : NumberLong(27710064),\
			"op" : "update",\
			"ns" : "performance.sensor_readings",\
			"query" : \{\
				"$where" : "function()\{sleep(500);return false;\}"\
			\},\
			"numYields" : 55,\
			"locks" : \{\
				"Global" : "w",\
				"Database" : "w",\
				"Collection" : "w"\
			\},\
			"waitingForLock" : false,\
			"lockStats" : \{\
				"Global" : \{\
					"acquireCount" : \{\
						"r" : NumberLong(56),\
						"w" : NumberLong(56)\
					\}\
				\},\
				"Database" : \{\
					"acquireCount" : \{\
						"w" : NumberLong(56)\
					\}\
				\},\
				"Collection" : \{\
					"acquireCount" : \{\
						"w" : NumberLong(56)\
					\}\
				\}\
			\}\
		\}\
	],\
	"ok" : 1\
\}\
> db.killOp(730191)\
\{ "info" : "attempting to kill op", "ok" : 1 \}\
\
\cf2 In 1st shell:\
\cf0 Long op ended\
\cf2 In 2nd shell:\cf0 \
> homework.c()\
12\
\cf2 In 1st shell:\
ctrl+c to end it\
\cf0 ^C\
do you want to kill the current op(s) on the server? (y/n): y\
\cf2 \
\cf0 3.\
nandithasmurthy$ ls\
products.json\
nandithasmurthy$ mongoimport --drop -d pcat -c products products.json \
2016-10-30T14:56:00.578+0530	connected to: localhost\
2016-10-30T14:56:00.582+0530	dropping: pcat.products\
2016-10-30T14:56:02.058+0530	imported 12 documents\
Nandithas-iMac:products__homework_m102_week3\
nandithasmurthy$ mongo pcat\
MongoDB shell version: 3.2.8\
connecting to: pcat\
> db\
pcat\
> show collections\
products\
products_bak\
> db.products.find(\{\}, \{for:1, _id:0\}).pretty()\
\{ \}\
\{ \}\
\{ \}\
\{ "for" : [ "ac3", "ac7", "ac9" ] \}\
\{ \}\
\{ "for" : "ac3" \}\
\{ "for" : "ac3" \}\
\{ "for" : [ "ac3", "ac7", "ac9", "qp7", "qp8", "qp9" ] \}\
\{ \}\
\{ \}\
\{ \}\
\{ \}\
> \
> db.products.getIndexes()\
[\
	\{\
		"v" : 1,\
		"key" : \{\
			"_id" : 1\
		\},\
		"name" : "_id_",\
		"ns" : "pcat.products"\
	\}\
]\
> db.products.createIndex(\{for:1\})\
\{\
	"createdCollectionAutomatically" : false,\
	"numIndexesBefore" : 1,\
	"numIndexesAfter" : 2,\
	"ok" : 1\
\}\
> db.products.getIndexes()\
[\
	\{\
		"v" : 1,\
		"key" : \{\
			"_id" : 1\
		\},\
		"name" : "_id_",\
		"ns" : "pcat.products"\
	\},\
	\{\
		"v" : 1,\
		"key" : \{\
			"for" : 1\
		\},\
		"name" : "for_1",\
		"ns" : "pcat.products"\
	\}\
]\
> \
> db.products.find(\{for:\{$in:["ac3"]\}\}, \{_id:0\}).count()\
4\
> db.products.explain().find(\{for:\{$in:["ac3"]\}\}, \{_id:0\}).count()\
\{\
	"queryPlanner" : \{\
		"plannerVersion" : 1,\
		"namespace" : "pcat.products",\
		"indexFilterSet" : false,\
		"parsedQuery" : \{\
			"for" : \{\
				"$in" : [\
					"ac3"\
				]\
			\}\
		\},\
		"winningPlan" : \{\
			"stage" : "COUNT",\
			"inputStage" : \{\
				"stage" : "COUNT_SCAN",\
				"keyPattern" : \{\
					"for" : 1\
				\},\
				"indexName" : "for_1",\
				"isMultiKey" : true,\
				"isUnique" : false,\
				"isSparse" : false,\
				"isPartial" : false,\
				"indexVersion" : 1\
			\}\
		\},\
		"rejectedPlans" : [ ]\
	\},\
	"serverInfo" : \{\
		"host" : "Nandithas-iMac.local",\
		"port" : 27017,\
		"version" : "3.2.8",\
		"gitVersion" : "ed70e33130c977bda0024c125b56d159573dbaf0"\
	\},\
	"ok" : 1\
\}\
> db.products.explain("executionStats").find(\{for:\{$in:["ac3"]\}\}, \{_id:0\}).count()\
\{\
	"queryPlanner" : \{\
		"plannerVersion" : 1,\
		"namespace" : "pcat.products",\
		"indexFilterSet" : false,\
		"parsedQuery" : \{\
			"for" : \{\
				"$in" : [\
					"ac3"\
				]\
			\}\
		\},\
		"winningPlan" : \{\
			"stage" : "COUNT",\
			"inputStage" : \{\
				"stage" : "COUNT_SCAN",\
				"keyPattern" : \{\
					"for" : 1\
				\},\
				"indexName" : "for_1",\
				"isMultiKey" : true,\
				"isUnique" : false,\
				"isSparse" : false,\
				"isPartial" : false,\
				"indexVersion" : 1\
			\}\
		\},\
		"rejectedPlans" : [ ]\
	\},\
	"executionStats" : \{\
		"executionSuccess" : true,\
		"nReturned" : 0,\
		"executionTimeMillis" : 0,\
		"totalKeysExamined" : 5,\
		"totalDocsExamined" : 0,\
		"executionStages" : \{\
			"stage" : "COUNT",\
			"nReturned" : 0,\
			"executionTimeMillisEstimate" : 0,\
			"works" : 5,\
			"advanced" : 0,\
			"needTime" : 4,\
			"needYield" : 0,\
			"saveState" : 0,\
			"restoreState" : 0,\
			"isEOF" : 1,\
			"invalidates" : 0,\
			"nCounted" : 4,\
			"nSkipped" : 0,\
			"inputStage" : \{\
				"stage" : "COUNT_SCAN",\
				"nReturned" : 4,\
				"executionTimeMillisEstimate" : 0,\
				"works" : 5,\
				"advanced" : 4,\
				"needTime" : 0,\
				"needYield" : 0,\
				"saveState" : 0,\
				"restoreState" : 0,\
				"isEOF" : 1,\
				"invalidates" : 0,\
				"keysExamined" : 5,\
				"keyPattern" : \{\
					"for" : 1\
				\},\
				"indexName" : "for_1",\
				"isMultiKey" : true,\
				"isUnique" : false,\
				"isSparse" : false,\
				"isPartial" : false,\
				"indexVersion" : 1\
			\}\
		\}\
  \
> \
> \
> db.products.explain("executionStats").find(\{for:\{$in:["ac3"]\}\}, \{_id:0\})\
\{\
	"queryPlanner" : \{\
		"plannerVersion" : 1,\
		"namespace" : "pcat.products",\
		"indexFilterSet" : false,\
		"parsedQuery" : \{\
			"for" : \{\
				"$in" : [\
					"ac3"\
				]\
			\}\
		\},\
		"winningPlan" : \{\
			"stage" : "PROJECTION",\
			"transformBy" : \{\
				"_id" : 0\
			\},\
			"inputStage" : \{\
				"stage" : "FETCH",\
				"inputStage" : \{\
					"stage" : "IXSCAN",\
					"keyPattern" : \{\
						"for" : 1\
					\},\
					"indexName" : "for_1",\
					"isMultiKey" : true,\
					"isUnique" : false,\
					"isSparse" : false,\
					"isPartial" : false,\
					"indexVersion" : 1,\
					"direction" : "forward",\
					"indexBounds" : \{\
						"for" : [\
							"[\\"ac3\\", \\"ac3\\"]"\
						]\
					\}\
				\}\
			\}\
		\},\
		"rejectedPlans" : [ ]\
	\},\
	"executionStats" : \{\
		"executionSuccess" : true,\
		"nReturned" : 4,\
		"executionTimeMillis" : 0,\
		"totalKeysExamined" : 4,\
		"totalDocsExamined" : 4,\
		"executionStages" : \{\
			"stage" : "PROJECTION",\
			"nReturned" : 4,\
			"executionTimeMillisEstimate" : 0,\
			"works" : 5,\
			"advanced" : 4,\
			"needTime" : 0,\
			"needYield" : 0,\
			"saveState" : 0,\
			"restoreState" : 0,\
			"isEOF" : 1,\
			"invalidates" : 0,\
			"transformBy" : \{\
				"_id" : 0\
			\},\
			"inputStage" : \{\
				"stage" : "FETCH",\
				"nReturned" : 4,\
				"executionTimeMillisEstimate" : 0,\
				"works" : 5,\
				"advanced" : 4,\
				"needTime" : 0,\
				"needYield" : 0,\
				"saveState" : 0,\
				"restoreState" : 0,\
				"isEOF" : 1,\
				"invalidates" : 0,\
				"docsExamined" : 4,\
				"alreadyHasObj" : 0,\
				"inputStage" : \{\
					"stage" : "IXSCAN",\
					"nReturned" : 4,\
					"executionTimeMillisEstimate" : 0,\
					"works" : 5,\
					"advanced" : 4,\
					"needTime" : 0,\
					"needYield" : 0,\
					"saveState" : 0,\
					"restoreState" : 0,\
					"isEOF" : 1,\
					"invalidates" : 0,\
					"keyPattern" : \{\
						"for" : 1\
					\},\
					"indexName" : "for_1",\
					"isMultiKey" : true,\
					"isUnique" : false,\
					"isSparse" : false,\
					"isPartial" : false,\
					"indexVersion" : 1,\
					"direction" : "forward",\
					"indexBounds" : \{\
						"for" : [\
							"[\\"ac3\\", \\"ac3\\"]"\
						]\
					\},\
					"keysExamined" : 4,\
					"dupsTested" : 4,\
					"dupsDropped" : 0,\
					"seenInvalidated" : 0\
				\}\
			\}\
		\}\
	\},\
	"serverInfo" : \{\
		"host" : "Nandithas-iMac.local",\
		"port" : 27017,\
		"version" : "3.2.8",\
		"gitVersion" : "ed70e33130c977bda0024c125b56d159573dbaf0"\
	\},\
	"ok" : 1\
\}\
> \
\
4. \
->Document Level locking\
->Compression\
\
\
\
}